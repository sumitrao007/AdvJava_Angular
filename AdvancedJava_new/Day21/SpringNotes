framework-
  1 framework is a set of API(It's predefined classes & interface) which works predefined algorithms & targetated to specific domain
  2 to develop the application in the systematic format with the help of framework
  e.g in photo studio shop if we want photo frame the shopkeeper will ask size of frame such as 4 by 4, 4 by 6 or etc so it has fixed size its a framework now in that photo frame we can tag your photo,your gf/bf photo.In short that frame given by shopkeeper & you can tag your photo in that it is called framework.
  3 Spring is framework of framework i.e combination of framework (means it work all functionality of core java standalone application,web application,data structure as collection framework).
  4 It has fix Flow it already predefined e.g. bus route is fix from katraj to swarget & swarget to katraj

Spring Framework:
	- Pre-requisits: OOP concepts & coding,core java,Introductory knowlegdge of Advanced Java.
	- Spring is light-weight comprehensive framework to Simplify Java (SE+EE) Development.
	- Light-weight -- Framework size is small + minimal num of jars (for give req.) + Minimal overheads.
		- Comprehensive -- Provides lot of functionality in minimal code.
		- Simplify Java Development -- Developer can focus on business logic, Spring manage testing, integration of other libs, ...
		- Exceptions -- Spring convert/wraps all checked exception into unchecked one.
		- Depedency Injection
- Spring Framework:
		- 2003 -- Rod Johnson -- sourceforge.net -- Open Source project.
		- Spring 1.x
		- Spring 2.x
		- * Spring 3.x -- Annotation based config.
		- * Spring 4.x
		- Spring 5.x
- Spring Features:
		- Modular -- different jars for different functionalities.
		- Flexible -- Most of frameworks follow "All or nothing" policy -- Spring is exception
		- Test Driven Development -- Unit testing is well integrated in Spring + Supprt for other testing.
		- Maintainable/Extendable -- Start with interfaces & can change impl over the time.
		- Exceptions -- Spring convert/wraps all checked exception into unchecked one.
		- Depedency Injection
		
- Spring container & IoC container: (Inversion of control)
		-It is used to create object of class,maintain life cycle of object,manage its state,  by spring. So it is called Loosely coupling, for this feature spring is more popular in market
		 - Mainly it based on two concept DI(Dependency Injection) & IOC (Inversion of control)
		 
		- IoC -- Inversion of Control
			 - It is an architectural pattern describing that programmer do not need to create an object, instead just describe how it should be created. No need to directly connect your components & services together in program, instead just describe which services are needed by which components in a configuration file/xml file. The spring IOC container is then responsible.
			- IOC create a singleton object means that object create only ones instance & we can use that object through out the application whenever we need.
			
		- DI -- Dependency Injection
			- The object initialization is done by spring -- adding dependencies into the object (i.e. initializing its properties).
			- DI is way to achieving the IOC.i.e to implement IOC we reuired Dependency Injection
			- Runtime object creation is not allowed
			- It Create Object before runtime & it inject whenever we want it gives object.
			
Spring Jars 
Here you can get Jars 
https://repo.spring.io/release/org/springframework/spring/5.0.0.RELEASE


- ApplicationContext 
	- It is an interface for providing configuration information to an application
	There are multiple classes provided by springframework that implements this interface and helps us use configuration information in applications.
	- Application Context is nothing but spring container.In newer version of spring Application Context to developed enterprise application.

**If you want intellience in eclipse you can install Spring STS plugin but its optional

- Bean Scope -
	1 singleton - create only one object
	2 prototype - create different object (i.e it makes different copies of object)


Dependecy Injection
	- Setter Based
		<bean id="b1" class="com.sunbeaminfo.sh.sp.BoxImpl">
			<property name="length" value="10"/>
			<property name="breadth" value="8"/>
			<property name="height" value="6"/>
		</bean>
		- Bean object is created & param less ctor is called. Then setter methods for all the properties is called to init them.
		
	- Constructor Based
		<bean id="b2" class="com.sunbeaminfo.sh.sp.BoxImpl">
			<constructor-arg index="0" value="5"/>
			<constructor-arg index="1" value="4"/>
			<constructor-arg index="2" value="3"/>
		</bean>
		- Bean object is created & parameterized ctor is executed to init it.
		

